version: '3.8'

networks:
  app-network:
    driver: bridge

services:
  mongo:
    image: mongo
    container_name: mongo-dev
    networks:
      - app-network
    ports:
      - "27017:27017"
    healthcheck:
      test: >
        bash -c "echo 'db.runCommand({ ping: 1 }).ok' |
                  mongosh localhost:27017/admin --quiet | grep 1"
      start_period: 20s
      interval: 10s
      timeout: 5s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    container_name: elasticsearch-dev
    networks:
      - app-network
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms4g -Xmx4g
    healthcheck:
      test: ["CMD-SHELL", "curl ‑fs http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=10s || exit 1"]
      start_period: 20s
      interval: 10s
      timeout: 5s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.2
    container_name: kibana-dev
    networks:
      - app-network
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-dev:9200
      - SERVER_HOST=0.0.0.0
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 30s

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka-kraft
    networks:
      - app-network
    ports:
      - "29092:29092"
      - "9094:9094"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-kraft:9093
      - KAFKA_CFG_LISTENERS=INTERNAL://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093,EXTERNAL://0.0.0.0:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka-kraft:29092,EXTERNAL://localhost:9094
    healthcheck:
      test: >
        bash -c "timeout 5 bash -c 'echo > /dev/tcp/localhost/29092' || exit 1"
      start_period: 60s
      interval: 15s
      timeout: 10s
      retries: 5

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.5.0
    container_name: kafka-connect
    networks:
      - app-network
    ports:
      - "8083:8083"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka-kraft:29092
      CONNECT_GROUP_ID: connect-cluster
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_PLUGIN_PATH: /usr/share/confluent-hub-components
    
    volumes:
      - ./scripts:/scripts
    command: >
      bash -c "
        confluent-hub install --no-prompt confluentinc/kafka-connect-elasticsearch:14.0.0 &&
        /etc/confluent/docker/run &

        echo 'Waiting for Kafka Connect REST API…'
        until curl -s http://localhost:8083/connectors; do sleep 5; done

        echo 'Registering Elasticsearch sink connector…'
        curl -X POST http://localhost:8083/connectors -H \"Content-Type: application/json\" --data @/scripts/create-es-sink.json

        sleep infinity
      "

  productsearch:
    image: productsearch
    container_name: productsearch
    build: .
    networks:
      - app-network
    ports:
      - "8080:8080"
    depends_on:
      mongo:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
      kafka:
        condition: service_healthy
      
    environment:
      SPRING_PROFILES_ACTIVE: "docker"
